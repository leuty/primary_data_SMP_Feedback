#!/bin/bash

# setup defaults
if [ -z "${NPX_LMC}" ]; then
  NPX=2
else
  NPX=${NPX_LMC}
fi
if [ -z "${NPY_LMC}" ]; then
  NPY=4
else
  NPY=${NPY_LMC}
fi
if [ -z "${NPIO_LMC}" ]; then
  NPIO=4
else
  NPIO=${NPIO_LMC}
fi
if [ -z "${EXE_LMC}" ]; then
  EXE=lm_f90
else
  EXE=${EXE_LMC}
fi
if [ -z "$1" ]; then
  SCHEDULER="SLURM"
else
  SCHEDULER="$1"
fi
if [ -z "$2" ]; then
  QUEUE="primary"
else
  QUEUE="$2"
fi
if [ -z "$3" ]; then
  ACCOUNT="s83"
else
  ACCOUNT="$3"
fi
if [ -z "$4" ]; then
  WAITFORJOB=""
else
  WAITFORJOB="$4"
fi
if [ -z "$CORES_PER_NODE" ] ; then
  echo "ERROR: need to specify CORES_PER_NODE"
  exit 1
fi
if [ -z "$TASKS_PER_NODE" ] ; then
  echo "ERROR: need to specify TASKS_PER_NODE"
  exit 1
fi
HOST=`hostname | sed 's/\..*$//g' | sed 's/[0-9]*$//g'`

# compute derived variables
NTASKS=`echo "${NPX}"'*'"${NPY}"'+'"${NPIO}" | bc`
NNODES=`python -c "from math import ceil; print int(ceil(${NTASKS}.0/${TASKS_PER_NODE}))"`

# cleanup
if [ -f .jobid ]; then
  if [ "${SCHEDULER}" = "PBS" ]; then
    qdel -W force `cat .jobid`
  elif [ "${SCHEDULER}" = "SLURM" ]; then
    scancel `cat .jobid`
  fi
  sleep 3
  \rm .jobid 2>/dev/null
fi
./clean

# setup namelists
cat > INPUT_DIA <<EOF_DIA
 &DIACTL
  n0meanval=0, nincmeanval=1,
  itype_diag_t2m=1,
  itype_diag_gusts=2,
  lgplong =.TRUE.,   n0gp=0,      hincgp=1.,
  stationlist_tot= 0, 0, 46.817,  6.935, 'Payerne',
                   0, 0, 47.483,  8.533, 'Zurich-Kloten',
 /END
EOF_DIA
cat > INPUT_DYN <<EOF_DYN
 &DYNCTL
    lhp2c=.true.,
    lspubc=.true.,
      rdheight=11000.0,
      nrdtau=10,
    lexpl_lbc=.true.,
      rlwidth=85000.0,
    ldyn_bbc=.true.,
    itype_bbc_w=2,
    betasw=0.4,
    xkd=0.1,
    epsass=0.15,
    lcond=.true.,
    lhordiff=.true.,
      itype_hdiff=2,
      hd_corr_u_bd=0.75,
      hd_corr_t_bd=0.75,
      hd_corr_q_bd=0.0,
      hd_corr_p_bd=0.75,
      hd_corr_u_in=0.25,
      hd_corr_t_in=0.0,
      hd_corr_q_in=0.0,
      hd_corr_p_in=0.0,
      hd_dhmax=250.,
    l2tls=.true.,
      irunge_kutta=1,
        irk_order=3,
        iadv_order=5,
        itheta_adv=0,
        ltadv_limiter=.false.,
      y_scalar_advect = 'BOTT2_STRANG',
      y_vert_adv_dyn='impl2',
        ieva_order=3,
    ldiabf_lh=.false.,
    itype_outflow_qrsg=2,
    itype_lbc_qrsg=1,
 /END
EOF_DYN
cat > INPUT_INI <<EOF_INI
 &INICTL
  ndfi=2,
  tspan= 1840.0, taus= 1840.0,
  dtbak=40.0, dtfwd=40.0,
 /END
EOF_INI
cat > INPUT_IO <<EOF_IO
 &IOCTL
  ldwd_grib_use=.false.,
  yform_read='ncdf',
  l_ke_in_gds=.TRUE.,
  lasync_io=.TRUE.,
  lbdclim=.TRUE.,
  itype_gather=2,
  ymode_read = 'r  ',
  ymode_write = 'w b',
  nincwait=90,
  nmaxwait=3600,
  nvers=907,
  ncenter=215,
  ngribout=1,
 /END
 &DATABASE
 /END
 &GRIBIN
  lbdana=.FALSE.,
  ydirini='./input/',
  lchkini=.TRUE.,
  hincbound=6.0,
  ydirbd='./bc/',
  lchkbd =.TRUE.,
  lana_qi = .FALSE.,
  llb_qi  = .FALSE.,
  lana_qg = .FALSE.,
  llb_qg  = .FALSE.,
  lana_qr_qs = .FALSE.,
  llb_qr_qs  = .FALSE.,
  lana_rho_snow = .FALSEE.,
  lan_lai = .TRUE., lan_rootdp = .TRUE., lan_vio3 = .TRUE., lan_plcov = .TRUE.,
  lan_t_cl = .TRUE.,  lan_w_cl = .TRUE., lan_hmo3 = .TRUE., lan_t_so0 = .TRUE.,
  lan_t_snow = .TRUE., lan_w_snow = .TRUE., lan_w_i = .TRUE., lan_rho_snow = .TRUE.,
  lan_t_s = .FALSE.,
  lan_t_s = .FALSE.,
  ytunitbd='d',
 /END
 &GRIBOUT
  yform_write='ncdf',
  ysystem='file',
  hcomb=0.0,2952.0,1.0,
  yvarml='U','V','W','T','QV','QC',
         'PP',
	 'QS','QR','QI','QG',
	 'VIO3','HMO3',
	 'T_SNOW','QV_S','W_SNOW','W_I','T_S',
	 'T_SO','W_SO','RHO_SNOW','FRESHSNW',
  yvarpl=' ',
  yvarzl=' ',
  lcheck=.TRUE.,
  luvmasspoint=.FALSE.,
  lwrite_const=.TRUE.,
  ydir='./output',
  l_z_filter=.FALSE., l_p_filter=.FALSE., 
  l_fi_ps_smooth = .FALSE.,
  ytunit='d',
 /END
EONL
EOF_IO
cat > INPUT_ORG <<EOF_ORG
 &LMGRID
  startlat_tot  = -19.36,
  startlon_tot  = -23.33,
  pollat=43.0, pollon=-170.0,
  dlon=0.11, dlat=0.11,
  ie_tot= 361, je_tot= 361, ke_tot=60,
 /END
 &RUNCTL
  lblock_phys=.FALSE., nproma=-1,
  dt=90.0,
  hstart=0.0, hstop=2952.0, 
  ydate_ini='2006050100',
  hincmxt=24.0,
  hincmxu=24.0,
  itype_timing=1,
  lreproduce=.TRUE.,
  luseobs =.false.,
  lphys   =.TRUE.,
  ldiagnos=.FALSE.,
  ldfi=.FALSE.,
  nprocx=${NPX}, nprocy=${NPY}, nprocio=${NPIO},
  nboundlines=3,
  ldump_ascii = .FALSE.,
  idbg_level = 3,
 /END
 &TUNING
   rlam_mom=0.0,
   rlam_heat=1.0,
   rat_sea=20.0,
   rat_lam=1.0,
   rat_can=1.0,
   wichfakt=0.0,
   c_lnd=2.0,
   c_sea=1.5,
   c_soil=1.0,
   pat_len=500.0,
   z0m_dia=0.2,
   crsmin=150.0,
   qc0=0.0,
   qi0=5E-6,
   entr_sc=5E-4,
 /END
EOF_ORG
cat > INPUT_PHY <<EOF_PHY
 &PHYCTL
  lgsp    =.TRUE.,
      itype_gscp=4,
      lprogprec=.TRUE.,
      ldiniprec=.FALSE., 
  lrad    =.TRUE.,
      hincrad = 1.0,
  lforest=.TRUE.,
  ltur    =.TRUE.,
      ninctura=1,
      lexpcor=.false.,
      ltmpcor=.false.,
      lprfcor=.false.,
      lnonloc=.false.,
      lcpfluc=.false.,
      itype_turb=3,
      imode_turb=1,
      itype_tran=2,
      imode_tran=1,
      limpltkediff=.true.,
      ltkesso=.FALSE.,
    itype_wcld=2,
      icldm_rad=4,
      icldm_turb=2,
      icldm_tran=0,
      itype_synd=2,
    lsoil=.TRUE.,
      lmelt=.TRUE.,
      lmelt_var=.TRUE.,
      lmulti_layer=.TRUE.,
      itype_evsl=2,
      itype_trvg=2,
      ke_soil=9,
      czml_soil=0.005, 0.025, 0.07, 0.16, 0.34, 0.70, 1.47, 2.86, 5.74,  11.50,
      czbot_w_so=4.0,
    lconv=.TRUE.,
      itype_conv=0,
      nincconv=5,
    lcape=.false.,
      lconf_avg=.true.,
    lsso=.true.,
    lradtopo=.FALSE.,
    itype_aerosol = 2,
    itype_albedo = 2,
 /END
EOF_PHY

cat > job <<EOF_job_SLURM
#!/bin/tcsh
#SBATCH --job-name=lm_c
#SBATCH --output=job.out
##SBATCH --nodes=${NNODES}                     #DL: COMMENT IN ONCE IN GPU
##SBATCH --ntasks-per-node=${TASKS_PER_NODE}   #DL: COMMENT IN ONCE IN GPU
#SBATCH --ntasks=${NTASKS}                     #DL: REMOVE ONCE RUN ON GPU
#SBATCH --partition=${QUEUE}
#SBATCH --time=24:00:00
#SBATCH --account=${ACCOUNT}
#SBATCH --hint=nomultithread
EOF_job_SLURM
  if [[ $HOST == daint* ]]; then
    sed -i '/account=/a\
#SBATCH --constraint=gpu\
module load daint-gpu\
setenv CRAY_CUDA_MPS 0' job
  elif [ "${GPUS_PER_NODE}" -gt 0 ] ; then
    sed -i '/account=/a\
#SBATCH --gres=gpu:'${GPUS_PER_NODE} job
fi

# rest of job (actual work)
cat >> job <<EOF_job

# Initialization
set verbose
set echo

# set environmental parameters
setenv OMP_NUM_THREADS 1
setenv COSMO_NPROC_NODEVICE ${NPIO_LMF}
setenv MALLOC_MMAP_MAX_ 0
setenv MALLOC_TRIM_THRESHOLD_ 536870912
setenv MV2_ENABLE_AFFINITY 0

#Replace soil moisture field
module load NCO
ncks -v W_SO ../input/lffd2006050100_lm_c.nc -A ./input/laf2006050100.nc


# cleanup
./clean

# echo date
date

# Run LM in case directory
${RUNCMD} -u -n ${NTASKS} ${EXE}

# echo date
date

# do postprocessing
cd ./output/
../../bin/grc
cd -

# remove job tag (if present)
\rm -f .jobid >&/dev/null

# done
EOF_job

# clean away old *.out files
\rm -f *.out 2>/dev/null

if [ -z "${WAITFORJOB}" ]; then
  jobid=`sbatch job | sed 's/Submitted batch job //g'`
else
  jobid=`sbatch --dependency=after:${WAITFORJOB} job | sed 's/Submitted batch job //g'`
fi

if [ $? -eq 0 -a -n "${jobid}" ]; then
  echo "${jobid}" > .jobid
  echo "${jobid}"
else
  exit 1
fi

